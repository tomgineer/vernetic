@use "sass:math";
/******************************************************************************
 * ASPECT RATIO UTILITIES
 *
 * Keys: 1, 169, 32, 43, 74, golden
 *****************************************************************************/

 $aspect-ratios: (
    "1"  : 1,                  // Square (1:1)
    "169": math.div(16, 9),    // Widescreen video (16:9)
    "32" : math.div(3, 2),     // Photography standard (3:2)
    "43" : math.div(4, 3),     // Legacy TV or image format (4:3)
    "74" : math.div(7, 4),     // Wide presentation format (7:4)
    "golden": 1.618            // Golden ratio (1.618:1)
);

@each $key, $value in $aspect-ratios {
    .aspect-#{$key} {
        aspect-ratio: #{$value};
    }
}

/******************************************************************************
 * EVENTS AND INTERACTIVITY
 *****************************************************************************/

/**
 * Disabled Elements
 *
 * - `.disabled`: Makes elements non-interactive and visually subdued.
 * - `.no-select`: Prevents text selection.
 * - `.no-events`: Completely disables pointer events.
 */
.disabled {
    pointer-events: none;
    opacity: 0.45;
}
.no-select {
    user-select: none;
}
.no-events {
    pointer-events: none;
}

/******************************************************************************
 * HIDING ELEMENTS
 *****************************************************************************/

/**
 * Hidden Class
 *
 * - `.hidden`: Completely hides elements, removing them from the layout.
 */
.hidden {
    display: none !important;
}

/**
 * Hide for Large Screens and Smaller
 *
 * - `.hide-lg`: Hides elements when the viewport is 1200px or smaller.
 */
@media (max-width: 1200px) {
    .hide-lg {
        display: none !important;
    }
}

/**
 * Hide for Medium Screens and Smaller
 *
 * - `.hide-md`: Hides elements when the viewport is 990px or smaller.
 */
@media (max-width: 990px) {
    .hide-md {
        display: none !important;
    }
}

/**
 * Hide for Small Screens and Smaller
 *
 * - `.hide-sm`: Hides elements when the viewport is 750px or smaller.
 */
@media (max-width: 750px) {
    .hide-sm {
        display: none !important;
    }
}

/**
 * Hide for Larger than Large Screens
 *
 * - `.hide-llg`: Hides elements when the viewport is wider than 1200px.
 */
@media (min-width: 1201px) {
    .hide-llg {
        display: none !important;
    }
}

/**
 * Hide for Larger than Medium Screens
 *
 * - `.hide-lmd`: Hides elements when the viewport is wider than 990px.
 */
@media (min-width: 991px) {
    .hide-lmd {
        display: none !important;
    }
}

/**
 * Hide for Larger than Small Screens
 *
 * - `.hide-lsm`: Hides elements when the viewport is wider than 750px.
 */
@media (min-width: 751px) {
    .hide-lsm {
        display: none !important;
    }
}

/**
 * Invisible Utility
 *
 * - `.invisible`: Hides the element while keeping its space in the layout.
 *   - Uses `visibility: hidden` instead of `display: none`.
 *   - Disables pointer interactions.
 */
.invisible {
    visibility: hidden;
    pointer-events: none;
}

/******************************************************************************
 * DISPLAY UTILITIES
 *****************************************************************************/

.display-block    {display: block;}
.display-contents {display: contents;}
.display-inline   {display: inline;}
.display-table    {display: table;}
.display-none     {display: none;}

/******************************************************************************
 * SHADOW
 *****************************************************************************/

.shadow {
    box-shadow: var(--shadow);
}

/******************************************************************************
 * BORDER RADIUS UTILITIES
 *
 * Keys: 0125, 025, 0375, 05, 065, 075, 1, pill
 *****************************************************************************/

$border-radius: (
    '0125': 0.125rem, '025': 0.25rem, '0375': 0.375rem, '05': 0.5rem,
    '065': 0.65rem, '075': 0.75rem, '1': 1rem, 'pill': 9999px
);

@each $key, $value in $border-radius {
    .br-#{$key} {
        border-radius: #{$value};
    }
}

/******************************************************************************
 * SVG ICON UTILITIES
 *
 * Keys: md, lg, xl, 2x, 3x, 4x, 5x
 *****************************************************************************/

.svg-icon {
    width: 1em;
    height: 1em;
    fill: currentcolor;

    // Preset sizes
    &.svg-icon-md { // Medium
        width: 1.375em;
        height: 1.375em;
    }
    &.svg-icon-lg { // Large
        width: 1.5em;
        height: 1.5em;
    }
    &.svg-icon-xl { // Extra Large
        width: 1.75em;
        height: 1.75em;
    }
    &.svg-icon-animate {
        animation: animateSvgIcon 2s linear infinite;
    }


    // Dynamic multipliers (2xâ€“5x)
    @for $i from 2 through 5 {
        &.svg-icon-#{$i}x {
            width: #{$i}em;
            height: #{$i}em;
        }
    }
}

@keyframes animateSvgIcon {
    from {transform: rotate(0deg);}
    to {transform: rotate(360deg);}
}

/******************************************************************************
 * POSITION UTILITIES
 *****************************************************************************/

/**
 * Relative Positioning
 *
 * - `.pos-relative`: Positions the element relative to its normal static position.
 * - Allows child elements with `absolute` positioning to be positioned relative to this element.
 */
.pos-relative {
    position: relative;
}

/**
 * Absolute Positioning
 *
 * - `.pos-absolute`: Positions the element relative to its nearest positioned ancestor
 *   (an ancestor with `relative`, `absolute`, or `fixed` positioning).
 * - Removes the element from the normal document flow.
 */
.pos-absolute {
    position: absolute;
}

/**
 * Sticky Positioning
 *
 * - `.pos-sticky`: Positions the element based on the user's scroll position.
 * - The element toggles between `relative` and `fixed`, depending on the scroll.
 * - Requires `top`, `right`, `bottom`, or `left` for proper behavior.
 */
.pos-sticky {
    position: sticky;
}

/******************************************************************************
 * OVERLAY
 *****************************************************************************/

.overlay  {
	position: fixed;
	width: 100%;
	height: 100%;
	z-index: 20;
    inset: 0;
	background: rgba(0,0,0,0.6);
	visibility: hidden;
	opacity: 0;
	transition: opacity 250ms linear;

	&.show {
		visibility: visible;
		opacity: 1;
	}
}

/******************************************************************************
 * THUMBNAIL
 *****************************************************************************/

.thumb {
    border-radius: .5rem;
    box-shadow: var(--shadow-soft);
    border: 3px solid var(--color-600);
}

/******************************************************************************
 * BORDER COLOR UTILITIES
 *****************************************************************************/

/**
 * Shades Array
 *
 * - Array of color shades corresponding to CSS custom properties.
 * - Dynamically generates border-top (`bt-*`) and border-bottom (`bb-*`) utility classes.
 */
$shades: ('50','100','200','300','400','500','600','700','800','900','1000','950','a100','a200','a400','a700');

@each $shade in $shades {
    .bt-#{$shade} {
        border-top: 1px solid var(--color-#{$shade});
    }

    .bb-#{$shade} {
        border-bottom: 1px solid var(--color-#{$shade});
    }
}