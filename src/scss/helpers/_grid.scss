@use "sass:map";
/******************************************************************************
 * GRID DISPLAY
 *****************************************************************************/

.grid        {display: grid;}
.grid-inline {display: inline-grid;}
.grid-dense  {grid-auto-flow: dense;}

/******************************************************************************
 * GRID TEMPLATE COLUMNS & ROWS
 *****************************************************************************/

@for $i from 1 through 10 {
	.grid-col-#{$i}      {grid-template-columns: repeat($i, 1fr);}
	.grid-col-span-#{$i} {grid-column: span $i;}
	.grid-row-span-#{$i} {grid-row: span $i;}
}

/******************************************************************************
 * RESPONSIVE GRID COLUMNS
 *****************************************************************************/

@media (max-width: 990px) {
	@for $i from 1 through 10 {
		.grid-col-md-#{$i} {grid-template-columns: repeat($i, 1fr);}
	}

	@for $i from 1 through 10 {
		.grid-col-span-md-#{$i} {grid-column: span $i;}
	}

    .grid-break-md {
        grid-template-columns: 1fr !important;
        > * {
            grid-column: span 1 !important;
            grid-row: span 1 !important;
        }
    }
}

@media (max-width: 750px) {
	@for $i from 1 through 10 {
		.grid-col-sm-#{$i} {grid-template-columns: repeat($i, 1fr);}
	}
    .grid-break-sm {
        grid-template-columns: 1fr !important;
        > * {
            grid-column: span 1 !important;
            grid-row: span 1 !important;
        }
    }
    .grid-col-spread-sm {grid-column: 1 / -1;}
}

/******************************************************************************
 * AUTO COLUMNS
 *
 * Available Keys:
 * - 50, 80, 100, 120, 150, 175, 200, 225, 250, 300, 320, 350, 400, 450
 *****************************************************************************/

$grid_col_sizes: ();

// Base multiples
@for $i from 1 through 9 {
    $grid_col_sizes: map.merge($grid_col_sizes, ("#{$i * 50}": $i * 50));
}

// Special values
@each $val in 80, 120, 175, 225, 320 {
    $grid_col_sizes: map-merge($grid_col_sizes, ("#{$val}": $val));
}

@each $suffix, $value in $grid_col_sizes {
	.grid-col-auto-#{$suffix} {
		grid-template-columns: repeat(auto-fill, minmax($value + px, 1fr));
	}
	.grid-col-auto-fit-#{$suffix} {
		grid-template-columns: repeat(auto-fit, minmax($value + px, 1fr));
	}
}

// Adjust grid layout for mobile screens when column size exceeds 250
// This ensures large columns (greater than 250) take up the full width on small screens
@media (max-width: 750px) {
    @each $suffix, $value in $grid_col_sizes {
        @if $value > 250 {
            .grid-col-auto-#{$suffix} {
                grid-template-columns: 1fr; // Force full-width layout
            }
        }
    }
}

/******************************************************************************
 * COLUMN SPREAD
 *****************************************************************************/

.grid-col-spread {grid-column: 1 / -1;}

@media (max-width: 750px) {
    .grid-col-spread-sm {grid-column: 1 / -1;}
}

.grid-col-2-spread { // Legacy
	grid-template-columns: 1fr auto;
}

/******************************************************************************
 * ALIGNMENT
 *****************************************************************************/

.grid-center {
    justify-content: center;
	align-items: center;
}

.grid-vc         {align-items: center;}
.grid-vt         {align-items: start;}
.grid-vb         {align-items: end;}
.grid-hc         {justify-content: center;}
.grid-hr         {justify-content: end;}
.grid-last-right {grid-column-end: -1;}
.grid-pc         {place-content: center;}

/******************************************************************************
 * SELF-ALIGNMENT
 *****************************************************************************/

.grid-self-bottom {align-self: end;}
.grid-self-right  {justify-self: right;}
.grid-self-center {justify-self: center;}
.grid-self-spread {align-self: stretch;}

/******************************************************************************
 * GAPS
 *
 * Available Keys:
 * - 0125, 025, 0375, 05, 065, 075, 1, 1.5, 2 -> 14
 *****************************************************************************/

$gaps: ("0125": .125, "025": .25, "0375": .375, "05": .5, "065": .65, "075": .75, "15": 1.5);

@for $i from 1 through 14 {
    $gaps: map.merge($gaps, ("#{$i}": $i));
}

@each $suffix, $value in $gaps {
	.gap-#{$suffix}     {gap: $value + rem;}
	.gap-row-#{$suffix} {row-gap: $value + rem;}
	.gap-col-#{$suffix} {column-gap: $value + rem;}
}

// Gaps for small displays
@media (max-width: 750px) {
    @each $suffix, $value in $gaps {
        .gap-sm-#{$suffix} {gap: $value + rem !important;}
    }
}

@for $i from 1 through 15 {
	.gap-#{$i}vw     {gap: $i + vw;}
    .gap-row-#{$i}vw {row-gap: $i + vw;}
	.gap-col-#{$i}vw {column-gap: $i + vw;}
}

/******************************************************************************
 * GRID FLOW
 *****************************************************************************/

.grid-flow-row    {grid-auto-flow: row;}
.grid-flow-column {grid-auto-flow: column;}

/******************************************************************************
 * GRID ORDER (for small displays)
 *****************************************************************************/

@media(max-width: 750px) {
    .order-1  {order: -1;}
    .order-2  {order: -2;}
}

/******************************************************************************
 * GRID HELPERS
 *****************************************************************************/

.grid-eq-h {grid-auto-rows: 1fr;}
.grid-eq-w {grid-auto-columns: 1fr;}
.grid-col-2-master {grid-template-columns: auto 1fr;}
.grid-col-3-master {grid-template-columns: auto auto 1fr;}
